image: node:latest

stages:
  - build
  - test
  - deploy

build-frontend:
  stage: build
  only: 
  - production
  cache:
    key:
      prefix: "frontend"
      files:
        - "client/package-lock.json"
    paths:
      - "client/node_modules/"

  script:
    - cd client && npm install && CI=false npm run build
  artifacts:
    expire_in: 1 days
    when: on_success
    paths:
      - client/build

build-backend:
  stage: build
  only: 
  - production
  cache:
    key:
      prefix: "backend"
      files:
        - "server/package-lock.json"
    paths:
      - "server/node_modules/"

  script:
    - cd server && npm install && CI=false npm run build
  artifacts:
    expire_in: 1 days
    when: on_success
    paths:
      - server/node_modules
      - server/build

#test:
#  stage: test
#  dependencies:
#    - build-backend
#  script:
#    - cd server && npm run test

#test_db:
#  script:
#    - npm install
#    - node ./specs/start.js ./specs/db-postgres.spec.js

deploy:
  stage: deploy
  image: mcr.microsoft.com/azure-cli
  dependencies:
    - build-frontend
    - build-backend
  only:
    - production
  before_script:
    - "az login --allow-no-subscriptions --service-principal -u $AZ_SP_ID -p $AZ_SP_SECRET --tenant $AZ_TENANT"
  script:
    - zip -r deploy.zip ./client ./server ./package.json
    ##    - "az webapp config appsettings set --resource-group $RESOURCE_GROUP_NAME --name $APP_NAME --settings WEBSITE_RUN_FROM_PACKAGE='1'"
    ##- "az webapp config appsettings set --resource-group $RESOURCE_GROUP_NAME --name $APP_NAME --settings ATLAS_URI=$ATLAS_URI"
    - "az webapp deployment source config-zip --resource-group $RESOURCE_GROUP_NAME --name $APP_NAME --src deploy.zip"
  artifacts:
    expire_in: 1 days
    when: on_success
    paths:
      - deploy.zip
